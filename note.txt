=====================================
ðŸ”’ EWT-15 Firebase Authentication ðŸ”’
=====================================

Data files = EWT-15.zip


Setups
------
JS = https://cdnjs.cloudflare.com/ajax/libs/firebase/10.12.5/firebase-auth-compat.min.js

1. Storage --> Profile photo
   - Security rules
2. Authentication
   - Sign-in method
   - Templates
   - Settings > Authorized domains


Events
------
AUTH.onAuthStateChanged(user => ...) --> Sign-In, Sign-Out
AUTH.onIdTokenChanged(user => ...) ----> Sign-In, Sign-Out, Token-Refresh


AUTH.createUserWithEmailAndPassword(email, password) : Promise<Credential>
----------------------------------------------------
case 'auth/email-already-in-use':
case 'auth/invalid-email':
case 'auth/weak-password':
*** auth/operation-not-allowed

switch (err.code) {
    case 'auth/email-already-in-use':
    case 'auth/invalid-email':
        this.$refs.email.setCustomValidity(err.message);
        this.$refs.email.reportValidity();
        break;
    case 'auth/weak-password':
        this.$refs.password.setCustomValidity(err.message);
        this.$refs.password.reportValidity();
        break;
    default:
        alert(err.message);
        break;
}


AUTH.updateCurrentUser(user) : Promise<void>
----------------------------


AUTH.signOut() : Promise<void>
--------------


AUTH.signInWithEmailAndPassword(email, password) : Promise<Credential>
------------------------------------------------
case 'auth/invalid-credential':
case 'auth/invalid-email':
case 'auth/user-disabled':
case 'auth/user-not-found':
case 'auth/wrong-password':
*** auth/too-many-requests

switch (err.code) {
    case 'auth/invalid-email':
    case 'auth/user-disabled':
    case 'auth/user-not-found':
        this.$refs.email.setCustomValidity(err.message);
        this.$refs.email.reportValidity();
        break;
    case 'auth/invalid-credential':
    case 'auth/wrong-password':
        this.$refs.password.setCustomValidity(err.message);
        this.$refs.password.reportValidity();
        break;
    default:
        alert(err.message);
        break;
}


AUTH.sendPasswordResetEmail(email, { url }) : Promise<void>
----------------------------------
case 'auth/invalid-email':
case 'auth/user-not-found':
*** auth/missing-android-pkg-name
*** auth/missing-continue-uri
*** auth/missing-ios-bundle-id
*** auth/invalid-continue-uri
*** auth/unauthorized-continue-uri

switch (err.code) {
    case 'auth/invalid-email':
    case 'auth/user-not-found':
        this.$refs.email.setCustomValidity(err.message);
        this.$refs.email.reportValidity();
        break;
    default:
        alert(err.message);
        break;
}


USER --> AUTH.currentUser
-------------------------
displayName
email
phoneNumber
photoURL
uid


USER.updateProfile({ displayName, photoURL }) : Promise<void>
---------------------------------------------


USER.updatePassword(password) : Promise<void>
-----------------------------
case 'auth/weak-password':
*** auth/requires-recent-login

switch (err.code) {
    case 'auth/weak-password':
        this.$refs.password.setCustomValidity(err.message);
        this.$refs.password.reportValidity();
        break;
    default:
        alert(err.message);
        break;
}


USER.delete() : Promise<void>
-------------
*** auth/requires-recent-login


Email Template
--------------
%DISPLAY_NAME%
%EMAIL%
%NEW_EMAIL%
%APP_NAME%
%LINK%

<p>Dear %DISPLAY_NAME%,</p>
<p>Click <a href='%LINK%'>here</a> to reset your password.</p>
<p>From, ðŸ˜º Super Admin.</p>


Codes
-----
this.$root.unblock();
this.$router.push('/');

this.$root.unblock();
handleError(err, this.$refs.email, this.$refs.password);

